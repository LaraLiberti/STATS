# let's try this again
#first lesson of stats

# comments

## operators
# + addition
# - Subtraction
# * multiplication
# / division
# ^ exponent
# %% modulus
# %/% integer division

## assignment operator: ->

# assignment

variable -> "value"

Name <- "Lara"
Name

Surname <- "Liberti"
Surname

# learning to use R as a calculator
# simple operations
2+3
1+2
1-3
2*2
4/2

# now we try logical operations
2>3
2>=3
2==3 #means "is equal to"
2==2
2!=3 #means "different from"

# let's try calculate the number of minutes in a year 
365*24*365

#NICE

#now we spice things up 
# let's create our first variable
# we give a name to the variable that counts the minutes in a year
# we use it to store the results 

minutes <- 365*24*60
minutes

# idk why but we are going to calculate the number of minutes in half a year 

365*24*60/2
minutes/2

# since minutes is a numerical variable we can do math operations w it 
minutes^2
minutes*3


# creating variables w my age

myage <- 23
myage2 = 24
myage
myage2

# now new operations

exp(myage) #esponenziale
log(myage) #logaritmica
sqrt(myage) #radice

# we can assign operations to a variable

var2 <- log(3)
var2

#REMEMBER 
#R is case sensitive 
var2 #only this is works
VAR2
Var2

#no spaces when defining a variable
var 3 <- 30 

#no symbols or numbers at the beginning
3var <- 30
_var <- 30

##I can also use other variable to create a new variable
minhalfyear <- minutes/2

minutes
print(minutes)


#the value of a variable can be updated
myage
myage <- myage + 1
myage

yourage <- 23
yourage <- 23+1
yourage


####################
# Second lesson

#operations again 
4+5
5>3
2==3

var1 <- 3
var1

var3 = 4

TRUE <- 3 #idk

var3 = 4+1

var2/2
var1 <- 4

remove(var1) # bro it cancelled the variable wow


# Some basic function in R

#to ask what functions do 
help(remove)  #remove and rm can be used to remove objects
?remove


log(3)
sqrt(4)
min(2,5,4,6)
max(2,5,4,6)

floor(1.2) #arrotonda per difetto
ceiling(1.2) # arrotonda per eccesso

var3 <- 3.7
floor(var3)
ceiling(var3)


round(x= 3.6245645, digits = 3) #round rounds the values to the specified number of decimal places

round(3.6245645, 3)

round(digits = 3, x= 3.6245645)

round(3, 3.6245645)


##
#Data types in R 

3 #numeric
TRUE #logical
"Lara" #character

#logical data types
2>3
log1 <- 2>3 

#two values and TRUE and FALSE capital letters

log2 <- T

log3 <- ((2+3^2)>40)

TRUE <- 3 

#Numeric type
# integers

v1 <- 4
v2 <- 3.14

class(4)
typeof(4L)
typeof(4)
typeof(6L)
class(3.14)
typeof(3.14)

?class
?typeof


#character data type 
"Welcome to this"
'Welcome to this'

# "Welcome' do NOT write in this way

char_var <- "statistics"
char_var

char_var2 <- "2+3"
var3 <- 2+3


word1 <- "welcome to"
word2 <- "this course"
word3 <- paste(word1,word2)


#Logical operators
#>, <,
# ==, !=  # equal and not equal

a <- 2

# && means AND 
## || menas OR 

(a >= 1) && (a < 5)
 
(a >= 1) || (a < 5)

(a > 3) || (a < 1)

(a >= 2) || (a < 1)

a != 3
a != 2

"lemon" != "apple"
"M" != "F"

"ac" < "ab"

#Order of operations

1+3*3

(1+1) == (1.5+0.5)

(1+1 == 1.5) + 0.5

#first mathematical operations and then logical operators, unless parentheses are used from left to right
6/2/3
(6/2)/3


# exponent - from right to left 
2^3^2
(2^3)^2
2^(3^2)


#scientific notation

0.0000001
1*(10)^(-7)

100000000
1*(10)^8

270000000
(2.7)*(10)^8


##Data structures:
#vectors
#matrices
#data-frame
#list

#VECTORS
vector1 <- c(2^2, 1/3, 3, 9, exp(2))
vector1

#numeric vector
vec1 <- c(1,2,3)
vec1
#mathematical operations on vectors in R are done element-wise
vec1+1
vec1^2  #cool

#character vectors
charvec <- c("welcome","to","this","course")
charvec
charvec + 1  #non possibile

#logical vectors
logvec <- c(TRUE, FALSE, TRUE, TRUE)
logvec

logvec2 <- c(1,2,3,4) > 1  #element-wise operation
logvec2

age= c(22,21,25,23)
age
olderstud <- (age>= 23)
olderstud

#lenght of vectors
length(olderstud)

length(c(1,1,1,1,1,1,2,3,4,5,5,1))

#type of vectors
class(logvec)
typeof(logvec)

class(age)
class(charvec)

#vector filtering
age

#take the first element
age [1]
age[4]

#all the elements from the first to the third
age[1:3]
age[c(1,2,3)]

# the first and the fourth element
filter <- c(1,4)
age[filter]
age[c(1,4)]

#delete the first element
age[-1]
age[-4]

#deleting the first three elements
age[-c(1,2,3)]
age[-(1:3)]

#deleting the first and the last element
age[-c(1,4)]

#vector filtered
new_vec <- age[-c(1,4)]
new_vec

#sequence of numbers
1:3
5:20


#################
# Third lesson

#decimal digits
.1
.254374

#multiple commands in the same line
a <- 5 ; b <- 3

#VECTORS ripasso

vec <- c(2,4,2,5)
length(vec)

vec2 <- c("a","b","c","d")
vec2[1:2]
vec2[-3]

filter <- c(1,2)
vec2[filter]

vec2[length(vec2)]  #selects the last element of the vector

vec3 <- vec2[c(4,3,2,1)]
vec3


#filtering using a logical vector
logi_filter <- c(TRUE, FALSE, FALSE, TRUE)
vec2[logi_filter]

vec2[vec2 != "a"]
vec2[vec2 == "c"]

age <- c(22,34,21,29)
age[age >= 22]

#other ways to create vectors
 v1 <- 1:6
v1

v2 <- 0.1:2.5
v2

#with the function rep

v3 <- rep(x=2, times=6)
v3

rep(2, 6)
rep(6, 2)
rep(times=6, x=2)

v4 <- rep(1:2, 3)
v4

v5 <- rep(1:2, each= 3)
v5

v6 <- rep(1:4, lenght.out = 3) #?
v6

# creating vectors with the function sequence -> seq
seq(from = 3, to= 10, by=0.4)
seq(3,10,0.4)

seq(1,9, length.out = 13)

###

rep(TRUE, 4)
rep("a", 4)    #ripete 

###
# creating sequence of letters 
letters[1:4]
LETTERS[1:4]

# how to create empty vectors
e1 <- c()
e1

e2 <- rep(NA, 10) #NA: not available
e2

#assigning values
e1[2] <- 3
e1

e2[2] <- 3
e2

v1
v1 [7] <- 7
v1

v1 [1] <- 100
v1

v1 <- 1:6

#exercize: replace the second and the third element and set them equal to 100

v1[2] <- 100
v1[3] <- 100
v1

#or you can do it like this

v1[c(2,3)] <- 100
v1

v1[c(2,3)] <- c(2^3,3^2)
v1

v1[c(2,3)] <- c(1,2,3) #non corretto


# create vectors by combinig vectors

v1 <- 1:6
v2 <- rep(1,3)

comb_vec <- c(v1,v2)
comb_vec

#name the elements of vectors

num_plants <- c("Species1" = 20, "Species2" = 10, "Species3" =1)
num_plants

typeof(num_plants)
class(num_plants)

names(num_plants)
names(num_plants) <- c("S1", "S2", "S3")
num_plants


vec_of_names <- c("S1", "S2", "S3")
names(num_plants) <- vec_of_names
num_plants


names(num_plants)[1] <- "abcd"
num_plants

#add names to an existing vector

age
names(age) <- c("stud1", "stud2", "stud3", "stud4")
age

# delete names

names(age) <- NULL
age

#OPERATIONS W VECTORS
v1 <- 1:6
v2 <- rep(1, 6)
v3 <- seq(100, 103, by=1)

length(v1)
length(v2)
length(v3)

v1+v2 #element-wise addition
v1*v2

v1+100
v1+ rep(100, 6)

#dot product
c(1,2,3)%*%c(1,2,3)

v1+v3


?c(1,2,3)%*%c(1,2,3)  #Multiplies two matrices


1+100

v1
v3


a <- seq(1:100, length=1)

#useful functions

v1
sum(v1)
mean(v1)
min(v1)
max(v1)

?mean(v1) #media

round(c(1.234233, 3.238342), digits = 2)

prod(v1)
cumsum(v1)
cumprod(v1)

?prod(V1) #returns the product of all the values present in its arguments.
?cumsum(v1) #Returns a vector whose elements are the cumulative sums, products, minima or maxima of the elements of the argument.
?cumprod(v1)

v_long <- seq(4, 20, by=0.5)
head(v_long)
tail(v_long)


# which: gives the position given by the logical operation

v <- c(2,4,5,2,4,8)
which(v ==2)
which(v > 4)

which.min(v)
which.max(v)

summary(v)


enrolled <- c(TRUE, FALSE,TRUE, FALSE,TRUE, FALSE,TRUE, FALSE)
length(enrolled)
sum(enrolled) #frequency
mean(enrolled) #relative frequency

sum( c("a","b") ) #non valido 



#vector coercition ##obbligo imposto

v.comb <- c( "Today", "is", 2, "of Oct")
v.comb

v.comb2 <- c(TRUE, 2, FALSE, 4)
v.comb2

v.comb3 <- c(TRUE, 2, FALSE, 4, "aaaa")
v.comb3


#Testing types

vlogi <- c(T, F, T, F)

is.logical(vlogi)
is.logical(c(1,2,3))

is.numeric(vlogi)
is.numeric(c(1,2,3))

is.character(c(1,2,3))
is.character(letters[1:3])



##changing type of vectos

vlogi <- c(T, F, T, F)

as.numeric(vlogi)
as.character(vlogi)
as.integer(c(1.2,2.5,4.9))

as.numeric(c("a", "b", "b")) #NA introdotti per coercizione 

as.logical(c(-1, 2, 0, 1))
